{"version":3,"sources":["aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["awsmobile","aws_project_region","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_user_files_s3_bucket","aws_user_files_s3_bucket_region","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_url","Amplify","configure","aws_exports","App","react_default","a","createElement","BrowserRouter","Grid","padded","Column","Route","path","exact","component","NewAlbum","AlbumsListLoader","render","NavLink","to","props","App_AlbumDetailsLoader","id","match","params","albumId","Component","AlbumsList","this","albums","sort","key","order","arguments","length","undefined","b","hasOwnProperty","aVal","toUpperCase","bVal","comparison","makeComparator","map","album","List","Item","concat","name","Segment","Header","as","divided","relaxed","albumItems","React","onNewAlbum","prevQuery","newData","updatedQuery","Object","assign","listAlbums","items","onCreateAlbum","dist","query","graphqlOperation","subscription","onSubscriptionMsg","_ref","data","loading","errors","App_AlbumsList","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","change","target","value","setState","handleSubmit","_ref2","asyncToGenerator","regenerator_default","mark","_callee","result","wrap","_context","prev","next","preventDefault","API","graphql","state","albumName","sent","console","info","createAlbum","stop","_x","apply","Input","type","placeholder","icon","iconPosition","action","content","onClick","onChange","AlbumDetailsLoader","_this3","nextTokenForPhotos","hasMorePhotos","getAlbum","photos","nextToken","loadMorePhotos","App_AlbumDetails","loadingPhotos","bind","AlbumDetails","Group","App_AlbumMembers","members","basic","App_AddUsernameToAlbum","App_S3ImageUpload","App_PhotosList","Form","Button","disabled","S3ImageUpload","_this4","_ref4","_callee3","e","file","fileName","_context3","files","uuid","uploading","Storage","put","customPrefix","public","metadata","albumid","log","t0","_x2","document","getElementById","click","accept","style","display","PhotosList","photo","thumbnail","imgKey","replace","paddingRight","Divider","hidden","photoItems","AddUsernameToAlbum","_this5","_ref5","defineProperty","_ref6","_callee4","_context4","username","addUsernameToAlbum","_x3","AlbumMembers","Icon","Content","bulleted","member","withAuthenticator","includeGreetings","Boolean","window","location","hostname","ReactDOM","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAmBeA,EAjBI,CACfC,mBAAsB,YACtBC,6BAAgC,iDAChCC,mBAAsB,YACtBC,kBAAqB,sBACrBC,6BAAgC,4BAChCC,4BAA+B,iFAC/BC,mBAAsB,YACtBC,+BAAkC,4BAClCC,yBAA4B,8CAC5BC,gCAAmC,YACnCC,4BAA+B,4CAC/BC,mCAAsC,YACtCC,yBAA4B,6JCIhCC,IAAQC,UAAUC,GAiBlB,IAqCMC,mLAEF,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,QAAM,GACVL,EAAAC,EAAAC,cAACE,EAAA,EAAKE,OAAN,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjCX,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWE,IACjCZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,KAAK,mBACLK,OAAQ,kBACNb,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAG,KAAZ,2BAGTf,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,KAAK,mBACLK,OAAQ,SAAAG,GAAK,OACXhB,EAAAC,EAAAC,cAACe,EAAD,CAAoBC,GAAIF,EAAMG,MAAMC,OAAOC,uBAjBzCC,aA2BZC,uLAEF,OAAOC,KAAKR,MAAMS,OAAOC,KAjF7B,SAAyBC,GAAoB,IAAfC,EAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,MACpC,OAAO,SAAC5B,EAAG+B,GACT,IAAK/B,EAAEgC,eAAeN,KAASK,EAAEC,eAAeN,GAAM,OAAO,EAE7D,IAAMO,EAAyB,kBAAXjC,EAAE0B,GAAoB1B,EAAE0B,GAAKQ,cAAgBlC,EAAE0B,GAC7DS,EAAyB,kBAAXJ,EAAEL,GAAoBK,EAAEL,GAAKQ,cAAgBH,EAAEL,GAE/DU,EAAa,EAIjB,OAHIH,EAAOE,IAAMC,EAAa,GAC1BH,EAAOE,IAAMC,GAAc,GAEd,SAAVT,GAAiC,EAAdS,EAAkBA,GAsEdC,CAAe,SAASC,IAAI,SAAAC,GAAK,OAC7DxC,EAAAC,EAAAC,cAACuC,EAAA,EAAKC,KAAN,CAAWf,IAAKa,EAAMtB,IACpBlB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAASC,GAAE,WAAA4B,OAAaH,EAAMtB,KAAOsB,EAAMI,0CAM/C,OACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAQC,GAAG,MAAX,aACA/C,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAMO,SAAO,EAACC,SAAO,GAClBzB,KAAK0B,sBAdSC,IAAM7B,WAqBzBV,6MACJwC,WAAa,SAACC,EAAWC,GAKvB,IAAIC,EAAeC,OAAOC,OAAO,GAAIJ,GAIrC,OAHAE,EAAaG,WAAWC,MAAQN,EAAUK,WAAWC,MAAMhB,OAAO,CAChEW,EAAQM,gBAEHL,2EAIP,OACEvD,EAAAC,EAAAC,cAAC2D,EAAA,QAAD,CACEC,MAAOC,2BArGC,iHAsGRC,aAAcD,2BA1EI,6FA2ElBE,kBAAmBzC,KAAK4B,YAEvB,SAAAc,GAA+B,IAA5BC,EAA4BD,EAA5BC,KAAMC,EAAsBF,EAAtBE,QAAsBF,EAAbG,OACjB,OAAID,EACKpE,EAAAC,EAAAC,cAAA,yBAEJiE,EAAKT,WAEH1D,EAAAC,EAAAC,cAACoE,EAAD,CAAY7C,OAAQ0C,EAAKT,WAAWC,aAF3C,WAxBqBR,IAAM7B,WAiC/BX,cACJ,SAAAA,EAAaK,GAAO,IAAAuD,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAhC,KAAAb,IAClB4D,EAAAf,OAAAiB,EAAA,EAAAjB,CAAAhC,KAAAgC,OAAAkB,EAAA,EAAAlB,CAAA7C,GAAAgE,KAAAnD,KAAMR,KAMR4D,aAAe,SAAAC,GACb,IAAIC,EAAS,GACbA,EAAOD,EAAME,OAAOnC,MAAQiC,EAAME,OAAOC,MACzCT,EAAKU,SAASH,IAVIP,EAapBW,aAboB,eAAAC,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAA6B,EAAApF,EAAAqF,KAaL,SAAAC,EAAMV,GAAN,IAAAW,EAAA,OAAAH,EAAApF,EAAAwF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACbf,EAAMgB,iBADO,2HAAAH,EAAAE,KAAA,EASQE,MAAIC,QACvBhC,2BAVW,2HAUgB,CAAEnB,KAAM2B,EAAKyB,MAAMC,aAVnC,OASPT,EATOE,EAAAQ,KAYbC,QAAQC,KAAR,yBAAAzD,OAAsC6C,EAAOrB,KAAKkC,YAAYnF,KAZjD,wBAAAwE,EAAAY,SAAAf,EAAA/D,SAbK,gBAAA+E,GAAA,OAAApB,EAAAqB,MAAAhF,KAAAK,YAAA,GAElB0C,EAAKyB,MAAQ,CACXC,UAAW,IAHK1B,wEA6BlB,OACEvE,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAQC,GAAG,MAAX,mBACA/C,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,iBACZC,KAAK,OACLC,aAAa,OACbC,OAAQ,CAAEC,QAAS,SAAUC,QAASxF,KAAK0D,cAC3CtC,KAAK,YACLoC,MAAOxD,KAAKwE,MAAMC,UAClBgB,SAAUzF,KAAKoD,uBAzCFtD,aAgDjB4F,cACJ,SAAAA,EAAYlG,GAAO,IAAAmG,EAAA,OAAA3D,OAAAgB,EAAA,EAAAhB,CAAAhC,KAAA0F,IACjBC,EAAA3D,OAAAiB,EAAA,EAAAjB,CAAAhC,KAAAgC,OAAAkB,EAAA,EAAAlB,CAAA0D,GAAAvC,KAAAnD,KAAMR,KACDgF,MAAQ,CACXoB,mBAAoB,KACpBC,eAAe,EACf7E,MAAO,KACP4B,SAAS,GANM+C,qMAUZ3F,KAAKwE,MAAMqB,sEAChB7F,KAAKyD,SAAS,CAAEb,SAAS,aACF0B,MAAIC,QAAQhC,2BA1KzB,+TA0KoD,CAAC7C,GAAIM,KAAKR,MAAME,GAAIkG,mBAAoB5F,KAAKwE,MAAMoB,sCAAzGjD,SAEiB,OAArB3C,KAAKwE,MAAMxD,MACbA,EAAQ2B,EAAKmD,UAEb9E,EAAQhB,KAAKwE,MAAMxD,OACb+E,OAAO5D,MAAQnB,EAAM+E,OAAO5D,MAAMhB,OAAOwB,EAAKmD,SAASC,OAAO5D,OAEtEnC,KAAKyD,SAAS,CACZzC,MAAOA,EACP4B,SAAS,EACTgD,mBAAoBjD,EAAKmD,SAASC,OAAOC,UACzCH,cAAkD,OAAnClD,EAAKmD,SAASC,OAAOC,0JAItChG,KAAKiG,kDAGL,OAAOzH,EAAAC,EAAAC,cAACwH,EAAD,CAAcC,cAAenG,KAAKwE,MAAM5B,QAAS5B,MAAOhB,KAAKwE,MAAMxD,MAAOiF,eAAgBjG,KAAKiG,eAAeG,KAAKpG,MAAO6F,cAAe7F,KAAKwE,MAAMqB,uBAhC9HlE,IAAM7B,WAqCjCuG,mLAEF,OAAKrG,KAAKR,MAAMwB,MAEdxC,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAQC,GAAG,MAAMvB,KAAKR,MAAMwB,MAAMI,MAClC5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAQiF,MAAT,KACE9H,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAC6H,EAAD,CAAcC,QAASxG,KAAKR,MAAMwB,MAAMwF,WAE1ChI,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAASoF,OAAK,GACZjI,EAAAC,EAAAC,cAACgI,EAAD,CAAoB7G,QAASG,KAAKR,MAAMwB,MAAMtB,OAGlDlB,EAAAC,EAAAC,cAACiI,EAAD,CAAe9G,QAASG,KAAKR,MAAMwB,MAAMtB,KACzClB,EAAAC,EAAAC,cAACkI,EAAD,CAAYb,OAAQ/F,KAAKR,MAAMwB,MAAM+E,OAAO5D,QAE1CnC,KAAKR,MAAMqG,eACXrH,EAAAC,EAAAC,cAACmI,EAAA,EAAKC,OAAN,CACEtB,QAASxF,KAAKR,MAAMyG,eACpBb,KAAK,UACL2B,SAAU/G,KAAKR,MAAM2G,cACrBZ,QAASvF,KAAKR,MAAM2G,cAAgB,aAAe,sBApB7B,0BAFPrG,aA8BrBkH,cACJ,SAAAA,EAAaxH,GAAO,IAAAyH,EAAA,OAAAjF,OAAAgB,EAAA,EAAAhB,CAAAhC,KAAAgH,IAClBC,EAAAjF,OAAAiB,EAAA,EAAAjB,CAAAhC,KAAAgC,OAAAkB,EAAA,EAAAlB,CAAAgF,GAAA7D,KAAAnD,KAAMR,KAGRiG,SAJoB,eAAAyB,EAAAlF,OAAA4B,EAAA,EAAA5B,CAAA6B,EAAApF,EAAAqF,KAIT,SAAAqD,EAAMC,GAAN,IAAAC,EAAAC,EAAAtD,EAAA,OAAAH,EAAApF,EAAAwF,KAAA,SAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,cACHiD,EAAOD,EAAE7D,OAAOiE,MAAM,GACtBF,EAAWG,eACjBR,EAAKxD,SAAS,CAAEiE,WAAW,IAHlBH,EAAApD,KAAA,EAAAoD,EAAAnD,KAAA,EAKcuD,UAAQC,IAAIN,EAAUD,EAAM,CAC/CQ,aAAc,CAAEC,OAAQ,YACxBC,SAAU,CAAEC,QAASf,EAAKzH,MAAMK,WAP3B,OAKDmE,EALCuD,EAAA7C,KASPC,QAAQsD,IAAI,kBAAmBjE,GAC/BiD,EAAKxD,SAAS,CAAEiE,WAAW,IAVpBH,EAAAnD,KAAA,iBAAAmD,EAAApD,KAAA,GAAAoD,EAAAW,GAAAX,EAAA,SAYP5C,QAAQsD,IAARV,EAAAW,IAZO,yBAAAX,EAAAzC,SAAAqC,EAAAnH,KAAA,aAJS,gBAAAmI,GAAA,OAAAjB,EAAAlC,MAAAhF,KAAAK,YAAA,GAElB4G,EAAKzC,MAAQ,CAAEkD,WAAW,GAFRT,wEAoBlB,OACEzI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmI,EAAA,EAAKC,OAAN,CACEtB,QAAS,kBACP4C,SAASC,eAAe,wBAAwBC,SAClDvB,SAAU/G,KAAKwE,MAAMkD,UACrBtC,KAAK,qBACLG,QAASvF,KAAKwE,MAAMkD,UAAY,eAAiB,cAEnDlJ,EAAAC,EAAAC,cAAA,SACEgB,GAAG,uBACHwF,KAAK,OACLqD,OAAO,UACP9C,SAAUzF,KAAKyF,SACf+C,MAAO,CAAEC,QAAS,kBAnCA9G,IAAM7B,WA0C5B4I,uLAEF,OAAO1I,KAAKR,MAAMuG,OAAOhF,IAAI,SAAA4H,GAAK,OAChCnK,EAAAC,EAAAC,cAAC2D,EAAA,QAAD,CACElC,IAAKwI,EAAMC,UAAUzI,IACrB0I,OAAQF,EAAMC,UAAUzI,IAAI2I,QAAQ,UAAW,IAC/CN,MAAO,CAAEC,QAAS,eAAgBM,aAAc,4CAKpD,OACEvK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsK,EAAA,EAAD,CAASC,QAAM,IACdjJ,KAAKkJ,qBAdWvH,IAAM7B,WAoBzBqJ,cACJ,SAAAA,EAAY3J,GAAO,IAAA4J,EAAA,OAAApH,OAAAgB,EAAA,EAAAhB,CAAAhC,KAAAmJ,IACjBC,EAAApH,OAAAiB,EAAA,EAAAjB,CAAAhC,KAAAgC,OAAAkB,EAAA,EAAAlB,CAAAmH,GAAAhG,KAAAnD,KAAMR,KAGV4D,aAAe,SAACgE,EAADiC,GAAA,IAAMjI,EAANiI,EAAMjI,KAAMoC,EAAZ6F,EAAY7F,MAAZ,OAAwB4F,EAAK3F,SAALzB,OAAAsH,EAAA,EAAAtH,CAAA,GAAiBZ,EAAOoC,KAJ1C4F,EAKrB1F,aALqB,eAAA6F,EAAAvH,OAAA4B,EAAA,EAAA5B,CAAA6B,EAAApF,EAAAqF,KAKN,SAAA0F,EAAOnG,GAAP,IAAAW,EAAA,OAAAH,EAAApF,EAAAwF,KAAA,SAAAwF,GAAA,cAAAA,EAAAtF,KAAAsF,EAAArF,MAAA,cACXf,EAAMgB,iBADK,oLAAAoF,EAAArF,KAAA,EAQUE,MAAIC,QAAQhC,2BARtB,oLAQ2D,CAAEmH,SAAUN,EAAK5E,MAAMkF,SAAU7J,QAASuJ,EAAK5J,MAAMK,WARhH,OAQLmE,EARKyF,EAAA/E,KASXC,QAAQsD,IAAR,SAAA9G,OAAqBiI,EAAK5E,MAAMkF,SAAhC,iBAAAvI,OAAwD6C,EAAOrB,KAAKgH,mBAAmBjK,KACvF0J,EAAK3F,SAAS,CAAEiG,SAAU,KAVf,wBAAAD,EAAA3E,SAAA0E,EAAAxJ,SALM,gBAAA4J,GAAA,OAAAL,EAAAvE,MAAAhF,KAAAK,YAAA,GAEjB+I,EAAK5E,MAAQ,CAAEkF,SAAU,IAFRN,wEAkBjB,OACE5K,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,WACZC,KAAK,YACLC,aAAa,OACbC,OAAQ,CAAEC,QAAS,MAAOC,QAASxF,KAAK0D,cACxCtC,KAAK,WACLoC,MAAOxD,KAAKwE,MAAMkF,SAClBjE,SAAUzF,KAAKoD,sBA5BUtD,aAkC3B+J,EAAe,SAACrK,GAAD,OACnBhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAQC,GAAG,MACT/C,EAAAC,EAAAC,cAACoL,EAAA,EAAD,CAAM1I,KAAK,gBACX5C,EAAAC,EAAAC,cAAC4C,EAAA,EAAOyI,QAAR,iBAEFvL,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAM+I,UAAQ,GACTxK,EAAMgH,SAAWhH,EAAMgH,QAAQzF,IAAI,SAACkJ,GAAD,OAAYzL,EAAAC,EAAAC,cAACuC,EAAA,EAAKC,KAAN,CAAWf,IAAK8J,GAASA,QAOlEC,8BAAkB3L,EAAK,CAAE4L,kBAAkB,ICjXtCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5K,MACvB,2DCVN6K,IAASnL,OAAOb,EAAAC,EAAAC,cAAC+L,EAAD,MAASrC,SAASC,eAAe,SDmH3C,kBAAmBqC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fb353bc0.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile =  {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:b5be30b6-598f-405c-be98-b47923464ab0\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_fxzk4IDIw\",\n    \"aws_user_pools_web_client_id\": \"47nuei3ou7s7le8h1hedvv75i\",\n    \"aws_appsync_graphqlEndpoint\": \"https://sklnprhm7jat3ovzobuz5p7agu.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    \"aws_user_files_s3_bucket\": \"photoalbums76f3acc6a3cb48d9911ad6df8f67351e\",\n    \"aws_user_files_s3_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_bucket\": \"photoalbums-20181021085130--hostingbucket\",\n    \"aws_content_delivery_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_url\": \"https://d1zhmhvb7d7lky.cloudfront.net\"\n};\n\n\nexport default awsmobile;\n","import React, { Component } from 'react'\nimport Amplify, { API, graphqlOperation, Storage } from 'aws-amplify'\nimport aws_exports from './aws-exports'\nimport { withAuthenticator } from 'aws-amplify-react'\nimport { Connect } from 'aws-amplify-react'\nimport {\n  Divider,\n  Form,\n  Grid,\n  Header,\n  Input,\n  List,\n  Segment,\n  Icon\n} from 'semantic-ui-react'\nimport { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'\nimport { v4 as uuid } from 'uuid'\nimport { S3Image } from 'aws-amplify-react'\n\nAmplify.configure(aws_exports)\n\nfunction makeComparator (key, order = 'asc') {\n  return (a, b) => {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) return 0\n\n    const aVal = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key]\n    const bVal = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key]\n\n    let comparison = 0\n    if (aVal > bVal) comparison = 1\n    if (aVal < bVal) comparison = -1\n\n    return order === 'desc' ? comparison * -1 : comparison\n  }\n}\n\nconst ListAlbums = `query ListAlbums {\n  listAlbums(limit: 9999) {\n      items {\n          id\n          name\n      }\n  }\n}`\n\nconst GetAlbum = `query GetAlbum($id: ID!, $nextTokenForPhotos: String) {\n  getAlbum(id: $id) {\n    id\n    name\n    members\n    photos(sortDirection: DESC, nextToken: $nextTokenForPhotos) {\n      nextToken\n      items {\n        thumbnail {\n          width\n          height\n          key\n        }\n      }\n    }\n  }\n}\n`;\n\nconst SubscribeToNewAlbums = `\n  subscription OnCreateAlbum {\n    onCreateAlbum {\n      id\n      name\n    }\n  }\n`\n\nclass App extends Component {\n  render () {\n    return (\n      <Router>\n        <Grid padded>\n          <Grid.Column>\n            <Route path='/' exact component={NewAlbum} />\n            <Route path='/' exact component={AlbumsListLoader} />\n            <Route\n              path='/albums/:albumId'\n              render={() => (\n                <div><NavLink to='/'>Back to Albums list</NavLink></div>\n              )}\n            />\n            <Route\n              path='/albums/:albumId'\n              render={props => (\n                <AlbumDetailsLoader id={props.match.params.albumId} />\n              )}\n            />\n          </Grid.Column>\n        </Grid>\n      </Router>\n    )\n  }\n}\n\nclass AlbumsList extends React.Component {\n  albumItems () {\n    return this.props.albums.sort(makeComparator('name')).map(album => (\n      <List.Item key={album.id}>\n        <NavLink to={`/albums/${album.id}`}>{album.name}</NavLink>\n      </List.Item>\n    ))\n  }\n\n  render () {\n    return (\n      <Segment>\n        <Header as='h3'>My Albums</Header>\n        <List divided relaxed>\n          {this.albumItems()}\n        </List>\n      </Segment>\n    )\n  }\n}\n\nclass AlbumsListLoader extends React.Component {\n  onNewAlbum = (prevQuery, newData) => {\n    // When we get data about a new album,\n    // we need to put in into an object\n    // with the same shape as the original query results,\n    // but with the new data added as well\n    let updatedQuery = Object.assign({}, prevQuery)\n    updatedQuery.listAlbums.items = prevQuery.listAlbums.items.concat([\n      newData.onCreateAlbum\n    ])\n    return updatedQuery\n  }\n\n  render () {\n    return (\n      <Connect\n        query={graphqlOperation(ListAlbums)}\n        subscription={graphqlOperation(SubscribeToNewAlbums)}\n        onSubscriptionMsg={this.onNewAlbum}\n      >\n        {({ data, loading, errors }) => {\n          if (loading) {\n            return <div>Loading...</div>\n          }\n          if (!data.listAlbums) return\n\n          return <AlbumsList albums={data.listAlbums.items} />\n        }}\n      </Connect>\n    )\n  }\n}\n\nclass NewAlbum extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      albumName: ''\n    }\n  }\n\n  handleChange = event => {\n    let change = {}\n    change[event.target.name] = event.target.value\n    this.setState(change)\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault()\n    const NewAlbum = `mutation NewAlbum($name: String!) {\n      createAlbum(input: {name: $name}) {\n        id\n        name\n      }\n    }`\n\n    const result = await API.graphql(\n      graphqlOperation(NewAlbum, { name: this.state.albumName })\n    )\n    console.info(`Created album with id ${result.data.createAlbum.id}`)\n  }\n\n  render () {\n    return (\n      <Segment>\n        <Header as='h3'>Add a new album</Header>\n        <Input\n          type='text'\n          placeholder='New Album Name'\n          icon='plus'\n          iconPosition='left'\n          action={{ content: 'Create', onClick: this.handleSubmit }}\n          name='albumName'\n          value={this.state.albumName}\n          onChange={this.handleChange}\n        />\n      </Segment>\n    )\n  }\n}\n\nclass AlbumDetailsLoader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nextTokenForPhotos: null,\n      hasMorePhotos: true,\n      album: null,\n      loading: true\n    }\n  }\n  async loadMorePhotos() {\n    if (!this.state.hasMorePhotos) return;\n    this.setState({ loading: true });\n    const { data } = await API.graphql(graphqlOperation(GetAlbum, {id: this.props.id, nextTokenForPhotos: this.state.nextTokenForPhotos}));\n    let album;\n    if (this.state.album === null) {\n      album = data.getAlbum;\n    } else {\n      album = this.state.album;\n      album.photos.items = album.photos.items.concat(data.getAlbum.photos.items);\n    }\n    this.setState({ \n      album: album,\n      loading: false,\n      nextTokenForPhotos: data.getAlbum.photos.nextToken,\n      hasMorePhotos: data.getAlbum.photos.nextToken !== null\n    });\n  }\n  componentDidMount() {\n    this.loadMorePhotos();\n  }\n  render() {\n    return <AlbumDetails loadingPhotos={this.state.loading} album={this.state.album} loadMorePhotos={this.loadMorePhotos.bind(this)} hasMorePhotos={this.state.hasMorePhotos}/>;\n  }\n}\n\n\nclass AlbumDetails extends Component {\n  render() {\n    if (!this.props.album) return 'Loading album...';\n    return (\n      <Segment>\n        <Header as='h3'>{this.props.album.name}</Header>\n        <Segment.Group>\n          <Segment>\n            <AlbumMembers members={this.props.album.members} />\n          </Segment>\n          <Segment basic>\n            <AddUsernameToAlbum albumId={this.props.album.id} />\n          </Segment>\n        </Segment.Group>\n        <S3ImageUpload albumId={this.props.album.id}/>        \n        <PhotosList photos={this.props.album.photos.items} />\n        {\n          this.props.hasMorePhotos && \n          <Form.Button\n            onClick={this.props.loadMorePhotos}\n            icon='refresh'\n            disabled={this.props.loadingPhotos}\n            content={this.props.loadingPhotos ? 'Loading...' : 'Load more photos'}\n          />\n        }\n      </Segment>\n    )\n  }\n}\n\nclass S3ImageUpload extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { uploading: false }\n  }\n  onChange = async e => {\n    const file = e.target.files[0]\n    const fileName = uuid()\n    this.setState({ uploading: true })\n    try {\n      const result = await Storage.put(fileName, file, {\n        customPrefix: { public: 'uploads/' },\n        metadata: { albumid: this.props.albumId }\n      })\n      console.log('Uploaded file: ', result)\n      this.setState({ uploading: false })\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  render () {\n    return (\n      <div>\n        <Form.Button\n          onClick={() =>\n            document.getElementById('add-image-file-input').click()}\n          disabled={this.state.uploading}\n          icon='file image outline'\n          content={this.state.uploading ? 'Uploading...' : 'Add Image'}\n        />\n        <input\n          id='add-image-file-input'\n          type='file'\n          accept='image/*'\n          onChange={this.onChange}\n          style={{ display: 'none' }}\n        />\n      </div>\n    )\n  }\n}\n\nclass PhotosList extends React.Component {\n  photoItems () {\n    return this.props.photos.map(photo => (\n      <S3Image\n        key={photo.thumbnail.key}\n        imgKey={photo.thumbnail.key.replace('public/', '')}\n        style={{ display: 'inline-block', paddingRight: '5px' }}\n      />\n    ))\n  }\n  render () {\n    return (\n      <div>\n        <Divider hidden />\n        {this.photoItems()}\n      </div>\n    )\n  }\n}\n\nclass AddUsernameToAlbum extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '' };\n  }\nhandleChange = (e, { name, value }) => this.setState({ [name]: value })\nhandleSubmit = async (event) => {\n    event.preventDefault();\n    const AddUsernameToAlbum = `\n      mutation AddUser($username: String!, $albumId: String!) {\n          addUsernameToAlbum(username: $username, albumId: $albumId) {\n              id\n          }\n      }`;\n    const result = await API.graphql(graphqlOperation(AddUsernameToAlbum, { username: this.state.username, albumId: this.props.albumId }));\n    console.log(`Added ${this.state.username} to album id ${result.data.addUsernameToAlbum.id}`);\n    this.setState({ username: '' });\n  }\nrender() {\n    return (\n      <Input\n        type='text'\n        placeholder='Username'\n        icon='user plus'\n        iconPosition='left'\n        action={{ content: 'Add', onClick: this.handleSubmit }}\n        name='username'\n        value={this.state.username}\n        onChange={this.handleChange}\n      />\n    )\n  }\n}\n\nconst AlbumMembers = (props) => (\n  <div>\n    <Header as='h4'>\n      <Icon name='user circle' />\n      <Header.Content>Members</Header.Content>\n    </Header>\n    <List bulleted>\n        {props.members && props.members.map((member) => <List.Item key={member}>{member}</List.Item>)}\n    </List>\n  </div>\n);\n\n\n\nexport default withAuthenticator(App, { includeGreetings: true })\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}